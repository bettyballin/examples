import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;
import java.util.ArrayList;
import java.util.List;

public class BankAccountSpecs {

    public static Specification<BankAccount> getBankAccounts(final BankAccountFilter filterCriteria) {
        return (Root<BankAccount> root, CriteriaQuery<?> query, CriteriaBuilder cb) -> {
            List<Predicate> predicates = new ArrayList<>();

            String accountNumber = filterCriteria.getAccountNumber();
            if (accountNumber != null) {
                predicates.add(cb.equal(root.get(BankAccount_.accountNumber), accountNumber));
            }

            // Additional criteria checks...

            // Restricting data by user logic would go here...

            return cb.and(predicates.toArray(new Predicate[0]));
        };
    }

    // Placeholder for BankAccountFilter class
    public static class BankAccountFilter {
        public String getAccountNumber() {
            // Implementation here
            return null;
        }
    }

    // Placeholder for BankAccount class
    public static class BankAccount {
        // Implementation here
    }

    // Placeholder for BankAccount_ class which is typically generated by JPA metamodel
    public static class BankAccount_ {
        public static volatile String accountNumber;
        // Implementation here
    }
}